
// export const firstUserRecord = functions.firestore.document('users/{userId}').onCreate(async (snap, context) => {
//     const userId: string = context.params.userId;
//     const conversationRef = userRef.doc(userId).collection('conversations');
//     const conversationRefKey = conversationRef.doc().id;
//     const participantRef = conversationRef.doc(conversationRefKey).collection('participants');
//     const participantRefKey = participantRef.doc().id;
//     const messageRef = conversationRef.doc(conversationRefKey).collection('messages');
//     const messageRefKey = messageRef.doc().id;
//     const arr: any[] = [
//         conversationRef.doc(conversationRefKey).set({ 'conversationId': conversationRefKey }),
//         participantRef.doc(participantRefKey).set({ 'participantId': participantRefKey }),
//         messageRef.doc(messageRefKey).set({ 'messageId': messageRefKey }),
//     ];
//     Promise.all(arr).then(p => {
//         console.log('Başarılı!');
//     }).catch(e => {
//         console.log('HATA');
//     });
// });

*******************************************************************

// export const cloneConversation = functions.firestore.document('users/{userId}/conversations/{conversationId}/participants/{participantId}').onCreate(async (snapshot, context) => {
//     const part: Participant = snapshot.data() as Participant;
//     console.log(part);
//     console.log('part : ' + part.user.userId);
//     console.log('context : ' + context.params.userId);
//     const conversation: Conversation = (await userRef.doc(context.params.userId)
//         .collection('conversations').doc(context.params.conversationId).get()).data() as Conversation;
//     userRef.doc(context.params.userId)
//         .collection('conversations').doc(context.params.conversationId)
//         .collection('participants').get().then(async p => {
//             // ADD CONVERSATION
//             if (part.user.userId !== context.params.userId) {

//                 await userRef.doc(part.user.userId)
//                     .collection('conversations').doc(part.conversationId).set({
//                         conversationId: conversation.conversationId,
//                         createdTime: conversation.createdTime,
//                         isActive: conversation.isActive,
//                         isDeleted: conversation.isDeleted,
//                         owner: {
//                             userId: conversation.owner.userId,
//                             email: conversation.owner.email,
//                             avatar: conversation.owner.avatar === null ? null : {
//                                 avatarName: conversation.owner.avatar.avatarName,
//                                 contentType: conversation.owner.avatar.contentType,
//                                 deletedTime: conversation.owner.avatar.deletedTime,
//                                 isActive: conversation.owner.avatar.isActive,
//                                 isDeleted: conversation.owner.avatar.isDeleted,
//                                 size: conversation.owner.avatar.size,
//                                 downloadURL: conversation.owner.avatar.downloadURL
//                             },
//                             displayName: conversation.owner.displayName,
//                             bio: conversation.owner.bio,
//                             creationTime: conversation.owner.creationTime,
//                             isActive: conversation.owner.isActive,
//                             isDeleted: conversation.owner.isDeleted,
//                             settings: {
//                                 darkTheme: conversation.owner.settings.darkTheme,
//                                 isPrivate: conversation.owner.settings.isPrivate,
//                                 notify: conversation.owner.settings.notify
//                             },
//                             deletedTime: conversation.owner.deletedTime
//                         },
//                         deletedTime: conversation.deletedTime,
//                         title: conversation.title
//                     })

//             }
//             p.forEach(async element => {
//                 const participant: Participant = element.data() as Participant;


//                 await userRef.doc(part.user.userId)
//                     .collection('conversations').doc(part.conversationId).collection('participants').doc(participant.participantId).set({
//                         participantId: participant.participantId,
//                         conversationId: participant.conversationId,
//                         creationTime: participant.creationTime,
//                         type: participant.type,
//                         user: {
//                             userId: participant.user.userId,
//                             avatar: participant.user.avatar === null ? null : {
//                                 avatarName: participant.user.avatar.avatarName,
//                                 contentType: participant.user.avatar.contentType,
//                                 deletedTime: participant.user.avatar.deletedTime,
//                                 isActive: participant.user.avatar.isActive,
//                                 isDeleted: participant.user.avatar.isDeleted,
//                                 size: participant.user.avatar.size,
//                                 downloadURL: participant.user.avatar.downloadURL,
//                             },
//                             bio: participant.user.bio,
//                             creationTime: participant.user.creationTime,
//                             displayName: participant.user.displayName,
//                             email: participant.user.email,
//                             isActive: participant.user.isActive,
//                             isDeleted: participant.user.isDeleted,
//                             settings: {
//                                 darkTheme: participant.user.settings.darkTheme,
//                                 isPrivate: participant.user.settings.isPrivate,
//                                 notify: participant.user.settings.notify
//                             },
//                             deletedTime: participant.user.deletedTime
//                         }
//                     })
//             });
//         }).catch(e => {
//             console.log(e);
//         })
// })